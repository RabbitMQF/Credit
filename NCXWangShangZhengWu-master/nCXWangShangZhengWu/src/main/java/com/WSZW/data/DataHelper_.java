//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.WSZW.data;

import java.lang.reflect.Type;
import java.util.Map;
import android.app.Activity;
import android.content.Context;
import android.util.Log;
import android.view.View;
import com.googlecode.androidannotations.api.BackgroundExecutor;

public final class DataHelper_
    extends DataHelper
{

    private Context context_;
    private static DataHelper_ instance_;

    private DataHelper_(Context context) {
        context_ = context;
        init_();
    }

    public void afterSetContentView_() {
        if (!(context_ instanceof Activity)) {
            return ;
        }
    }

    /**
     * You should check that context is an activity before calling this method
     * 
     */
    public View findViewById(int id) {
        Activity activity_ = ((Activity) context_);
        return activity_.findViewById(id);
    }

    @SuppressWarnings("all")
    private void init_() {
        if (context_ instanceof Activity) {
            Activity activity = ((Activity) context_);
        }
        infoFile = new InfoFile_(context_);
        context = context_;
    }

    public static DataHelper_ getInstance_(Context context) {
        if (instance_ == null) {
            instance_ = new DataHelper_(context.getApplicationContext());
        }
        return instance_;
    }

    public void rebind(Context context) {
    }

    @Override
    public void doHttpGetInBackground(final int flag, final String urlPrefix, final String path, final Map<String, Object> params, final Type type) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.doHttpGetInBackground(flag, urlPrefix, path, params, type);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void doWsInBackground(final int flag, final String wsUrl, final String methodName, final Map<String, Object> params, final Type type) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.doWsInBackground(flag, wsUrl, methodName, params, type);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void loginBpn(final String username) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.loginBpn(username);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void doWsInBackground(final int flag, final String wsUrl, final String methodName, final Map<String, Object> params) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.doWsInBackground(flag, wsUrl, methodName, params);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void doWsInBackground(final int flag, final String wsUrl, final String methodName, final Map<String, Object> params, final Class<?> clazz) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.doWsInBackground(flag, wsUrl, methodName, params, clazz);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void doHttpGetInBackground(final int flag, final String urlPrefix, final String path, final Map<String, Object> params) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.doHttpGetInBackground(flag, urlPrefix, path, params);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void doHttpPostInBackground(final int flag, final String url, final Map<String, Object> params) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.doHttpPostInBackground(flag, url, params);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void downLoadInBackground(final int flag, final String url, final String filePath) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.downLoadInBackground(flag, url, filePath);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void bpnMsg(final int flag, final String methodName, final Map<String, Object> params, final Type type) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    DataHelper_.super.bpnMsg(flag, methodName, params, type);
                } catch (RuntimeException e) {
                    Log.e("DataHelper_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

}
